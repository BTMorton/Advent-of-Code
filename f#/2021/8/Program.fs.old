// Learn more about F# at http://docs.microsoft.com/dotnet/fsharp

open System
open AOCHelpers.AOC

let segmentCounts =
    [
        (0, 6);
        (1, 2);
        (2, 5);
        (3, 5);
        (4, 4);
        (6, 6);
        (7, 3);
        (8, 7);
        (9, 6);
    ] |> Map.ofList

let easySegmentCounts =
    [
        2;
        3;
        4;
        7
    ] |> Set.ofList

let findCharactersInCommon =
    Seq.map Set.ofSeq
    >> Set.intersectMany
    >> Set.toSeq

let addSegmentToMap (map: Map<int, string>) num (char: string) =
    map.Add(num, char)

let constructNumberFromSegments (segmentMap: Map<int, string>) segments =
    segments
    |> Seq.map segmentMap.TryFind
    |> Seq.choose id
    |> Seq.sort
    |> String.concat ""

let lookupNumber (numberMap: Map<string, int>) (string: string) =
    string
    |> Seq.sort
    |> String.Concat
    |> numberMap.TryFind

let generateNumberMap (segmentMap: Map<int, string>) =
    [
        (0, [1; 2; 3; 5; 6; 7]);
        (1, [3; 6]);
        (2, [1; 3; 4; 5; 7]);
        (3, [1; 3; 4; 6; 7]);
        (4, [2; 3; 4; 6]);
        (5, [1; 2; 4; 6; 7]);
        (6, [1; 2; 4; 5; 6; 7]);
        (7, [1; 3; 6]);
        (8, [1; 2; 3; 4; 5; 6; 7]);
        (9, [1; 2; 3; 4; 6; 7]);
    ]
    |> Seq.map (fun (num, segments) -> (constructNumberFromSegments segmentMap segments, num))
    |> Map.ofSeq

let calculateOutput (input, output) =
    let all = Seq.append input output
    let segmentMap = new Map<int, string>([]);

    let rightSeg = all |> Seq.filter (String.length >> (=) 2) |> Seq.head

    let topChar = all
                    |> Seq.filter (String.length >> (=) 3)
                    |> Seq.head
                    |> Seq.filter (rightSeg.Contains >> not)
                    |> String.Concat
    let segmentMap = segmentMap.Add(1, topChar)

    let botChar = all
                    |> Seq.filter (String.length >> easySegmentCounts.Contains >> not)
                    |> findCharactersInCommon
                    |> Seq.filter (topChar.Contains >> not)
                    |> String.Concat
    let segmentMap = segmentMap.Add(7, botChar)
    let segments = String.concat "" [ rightSeg; topChar; botChar ]

    let midChar = all
                    |> Seq.filter(String.length >> (=) 5)
                    |> Seq.find (fun s -> segments |> Seq.forall s.Contains)
                    |> Seq.filter (segments.Contains >> not)
                    |> String.Concat
    let segmentMap = segmentMap.Add(4, midChar)
    let segments = String.concat "" [ segments; midChar ]

    let topLeftChar = all
                        |> Seq.filter(String.length >> (=) 4)
                        |> Seq.head
                        |> Seq.filter (segments.Contains >> not)
                        |> String.Concat
    let segmentMap = segmentMap.Add(2, topLeftChar)
    let segments = String.concat "" [ segments; topLeftChar ]
    let botLeftChar = all
                        |> Seq.filter(String.length >> (=) 6)
                        |> Seq.find (fun s -> s.Contains midChar |> not)
                        |> Seq.filter (segments.Contains >> not)
                        |> String.Concat
    let segmentMap = segmentMap.Add(5, botLeftChar)

    let botRightChar = all
                        |> Seq.filter(String.length >> (=) 6)
                        |> Seq.find (fun s -> rightSeg |> Seq.exists (s.Contains >> not))
                        |> Seq.filter (rightSeg.Contains)
                        |> String.Concat
    let segmentMap = segmentMap.Add(6, botRightChar)
    let segmentMap = segmentMap.Add(3, rightSeg |> Seq.filter (botRightChar.Contains >> not) |> String.Concat)

    let numberMap = generateNumberMap segmentMap

    output
    |> Seq.map (lookupNumber numberMap)
    |> Seq.choose id
    |> Seq.map string
    |> String.concat ""
    |> int

let part1 = 
    Seq.collect snd
    >> Seq.map String.length
    >> Seq.filter easySegmentCounts.Contains
    >> Seq.length

let part2 = 
    Seq.map calculateOutput
    >> Seq.sum

[<EntryPoint>]
let main argv =
    let lines = IO.File.ReadAllLines "real_data.txt"
                |> Seq.map (
                    split "|"
                    >> Array.map (trim >> split " " >> Seq.ofArray)
                    >> (fun seq -> (Seq.item 0 seq, Seq.item 1 seq))
                )

    printfn "Part 1: %d" (part1 lines)
    printfn "Part 2: %d" (part2 lines)

    0 // return an integer exit code